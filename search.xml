<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kotlin学习笔记</title>
      <link href="/2023/08/07/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/07/Kotlin%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1><span id="kotlin学习笔记">Kotlin学习笔记</span></h1><p>[TOC]</p><h3><span id="1kotlin特点">1.Kotlin特点：</span></h3><ul><li><p>有优秀的类型推导机制</p></li><li><p>完全抛弃了Java中的 基本数据类型，全部使用了对象数据类型</p></li><li><p>也是面向对象编程</p></li><li><p>Kotlin第一个版本就使用Lambda表达式（Java是从JDK1.8后才引入），并且拥有一些高阶函数和语法糖</p></li><li><p>提供函数式编程</p></li><li><p>编译时判空，因此Kotlin是空指针安全的</p></li></ul><h3><span id="2变量">2.变量</span></h3><p><strong>val</strong>（value的简写）用来声明一个<strong>不可变的变量</strong>，这种变量在初始赋值之后就再也<strong>不能重新赋值</strong></p><p><strong>var</strong>（variable的简写）用来声明一个<strong>可变的变量</strong>，这种变量在初始赋值之后<strong>仍然可以再被重新赋值</strong></p><p>错误写法：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">val</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span> a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">10</span>     <span class="token comment">// 错误写法</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a = "</span></span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正确写法：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">var</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">10</span> a <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">10</span>     <span class="token comment">// 错误写法</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"a = "</span></span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3函数">3.函数</span></h3><p>基本函数形式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">method</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token operator">:</span>Int <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>fun：声明这是一个方法</p><p>method：方法名</p><p>a、b：变量</p><p>:Int 第一和第二个指前面那个变量的类型 括号外面的指这个函数的返回值类型（如果返回void类型可以直接不写）</p><p>函数简略形式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largeNumber</span><span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span> b<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于Kotlin出色的类型推导机制，这里的max(a,b)返回的是Int类型，因此可以省略返回值类型声明，同时用了=号来删去{}和return</p><h3><span id="4if条件语句">4.if条件语句</span></h3><p>看一个简化的例子：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largeNumber2</span><span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        value <span class="token operator">=</span> a    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>        value <span class="token operator">=</span> b    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初步简化：（if直接作为变量赋值）(默认ifelse最后一行为返回值)</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largeNumber2</span><span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>         a    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>         b    <span class="token punctuation">}</span>    <span class="token keyword">return</span> value<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除多余变量</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largeNumber2</span><span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Int <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>         a    <span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>         b    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除返回值和括号:</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">largeNumber2</span><span class="token punctuation">(</span>a<span class="token operator">:</span>Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到最简形式</p><h3><span id="5when语句">5.when语句</span></h3><p>一个变化看懂when的用法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getScore</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">"Tom"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">86</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">"Jim"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">77</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">"Jack"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">95</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">"Lily"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token number">100</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用when：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">getScore</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">"Tom"</span></span> <span class="token operator">-&gt;</span> <span class="token number">86</span> <span class="token string-literal singleline"><span class="token string">"Jim"</span></span> <span class="token operator">-&gt;</span> <span class="token number">77</span> <span class="token string-literal singleline"><span class="token string">"Jack"</span></span> <span class="token operator">-&gt;</span> <span class="token number">95</span> <span class="token string-literal singleline"><span class="token string">"Lily"</span></span> <span class="token operator">-&gt;</span> <span class="token number">100</span> <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两端代码运行效果是一样的，但是when却比多个ifelse要清爽很多</p><p>匹配类型：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">checkNum</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">when</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">is</span> Int <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"number is Int"</span></span><span class="token punctuation">)</span>        <span class="token keyword">is</span> Double <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"number is Double"</span></span><span class="token punctuation">)</span>        <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"number not support"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多细节：<a href="https://kotlinlang.org/docs/control-flow.html#when-expression">https://kotlinlang.org/docs/control-flow.html#when-expression</a></p><h3><span id="6循环语句">6.循环语句</span></h3><p>while(和Java基本一致)<br>for - i 循环被kotlin舍弃</p><p>使用for-in循环（类似python）</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> range <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span>  <span class="token comment">// 表示闭区间[0,10]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>for-in</strong>循环使用：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">forRang</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用左闭右开区间关键词<strong>until</strong>，步长用step</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">forStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until <span class="token number">10</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// until左闭右开</span>        <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>downTo降序关键词</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">forDownTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">10</span> downTo <span class="token number">0</span> step <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// downTo是闭区间</span>        <span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="7编写类">7.编写类</span></h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span>   <span class="token comment">// 成员变量使用var，因为后面需要对其赋值</span>    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">fun</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> is eating and he is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">age</span></span><span class="token string"> years old"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用此类：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"Mary"</span></span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230301152504119.png" alt="image-20230301152504119"></p><p><strong>继承</strong>：</p><p>继承的条件：</p><p>1.父类可继承（在Kotlin中<strong>任何一个非抽象类默认都是不可以被继承的</strong>，相当于Java中给类声明了<strong>final</strong> 关键字，为了就是让类成为和val一样<strong>不可变</strong>），使用open关键词</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">open</span> <span class="token keyword">class</span> Person <span class="token punctuation">{</span>    <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.用:继承此类（继承的是父类的构造函数）</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Student <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> sno <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span>    <span class="token keyword">var</span> grade <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Kotlin的类里面有1个主构造函数和一个或多个构造函数</strong></p><ul><li><strong>主构造函数</strong>:</li></ul><p>在类定义主构造函数：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">val</span> sno <span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> grade <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样每次初始化Student类就必须要传入sno和grade这两个成员变量</p><p><strong>主构造函数不能有函数体</strong>，如果我们需要在类初始化的时候执行一些操作，我们需要用到init{}代码块</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">val</span> sno <span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> grade <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">init</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"sno is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">sno</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"grade is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">grade</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>继承父类的构造函数——把构造方法的参数传给父类的构造方法</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">PrimaryStudent</span><span class="token punctuation">(</span><span class="token keyword">val</span> cla<span class="token operator">:</span> String<span class="token punctuation">,</span> sno<span class="token operator">:</span> String<span class="token punctuation">,</span> grade <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Student</span><span class="token punctuation">(</span>sno<span class="token punctuation">,</span> grade<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>次构造函数</strong></li></ul><p>次构造函数也可以用于实例化一个类，有函数体，但是<strong>Kotlin规定，当一个类既有主构造函数又有次构造函数时，所有的次构造函数都必须调用主构造 函数（包括间接调用）</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">val</span> sno <span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> grade <span class="token operator">:</span> Int<span class="token punctuation">,</span> name<span class="token operator">:</span>String<span class="token punctuation">,</span> age<span class="token operator">:</span>Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">constructor</span><span class="token punctuation">(</span>name <span class="token operator">:</span> String<span class="token punctuation">,</span> age <span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">// 调用主构造函数</span>    <span class="token punctuation">}</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token keyword">this</span> <span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">""</span></span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// 调用上面的次构造函数</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="8编写接口">8.编写接口</span></h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Study <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>继承接口和继承类差不多，不同的是接口没有构造函数，所以不需要()</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> student <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Jack"</span></span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span>student<span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>student<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230301162818132.png" alt="image-20230301162818132"></p><p>改成使用<strong>多态</strong>的方法：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study <span class="token operator">:</span>Study<span class="token punctuation">)</span> <span class="token punctuation">{</span>    study<span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    study<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">val</span> student <span class="token operator">=</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Jack"</span></span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span>    <span class="token function">doStudy</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>  <span class="token comment">// student实现了study接口，所以Student类的实例是可以传递给</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果是一样的</p><h3><span id="9修饰符">9.修饰符</span></h3><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230301163520327.png" alt="image-20230301163520327"></p><h3><span id="10数据类">10.数据类</span></h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Cellphone</span><span class="token punctuation">(</span><span class="token keyword">val</span> brand<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> price<span class="token operator">:</span> Double<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cellphone</span> <span class="token punctuation">{</span> <span class="token class-name">String</span> brand<span class="token punctuation">;</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">Cellphone</span><span class="token punctuation">(</span><span class="token class-name">String</span> brand<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Cellphone</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">Cellphone</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cellphone</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span> <span class="token keyword">return</span> other<span class="token punctuation">.</span>brand<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>brand<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> other<span class="token punctuation">.</span>price <span class="token operator">==</span> price<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> brand<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> price<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">"Cellphone(brand="</span> <span class="token operator">+</span> brand <span class="token operator">+</span> <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面kotlin的代码和java的代码时等效的</p><h3><span id="11单例类">11.单例类</span></h3><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> Singleton <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"singletonTest is called"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> instance<span class="token punctuation">;</span> <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"singletonTest is called."</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用kotlin中的单例类方法（和调用Java中的静态方法一样）</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">Singleton<span class="token punctuation">.</span><span class="token function">singletonTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="12kotlin集合操作">12.Kotlin集合操作</span></h3><h4><span id="121-list集合">12.1 List集合</span></h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Grape"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>列表初始化：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list2 <span class="token operator">=</span> listOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Grape"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遍历操作：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>内置函数**listOf() &amp; mutableListOf()  **</p><p>listOf() 函数: 创建的是一个<strong>不可变集合</strong>（即，<strong>只能用于读取，无法进行添加、修改、删除操作</strong>）</p><p>mutableListOf() : 创建的是一个<strong>可变集合</strong>（可<strong>添加删除和修改</strong>）</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list3 <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Grape"</span></span><span class="token punctuation">)</span>list3<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"watermelon"</span></span><span class="token punctuation">)</span>list3<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list3<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230311163947621.png" alt="image-20230311163947621"></p><h4><span id="122-set集合">12.2 Set集合</span></h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Grape"</span></span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> <span class="token keyword">set</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和List集合基本一致，不同的是：<strong>Set是不可以放重复元素（会去重）</strong></p><h4><span id="123-map集合">12.3 Map集合</span></h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> map <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230311164828339.png" alt="image-20230311164828339"></p><p>map出现重复的键时，以最新的为准</p><p>遍历：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> map<span class="token punctuation">)</span> <span class="token keyword">in</span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"fruit: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">fruit</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">map</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230311165034011.png" alt="image-20230311165034011"></p><p>并且只允许存在最新的那个键值对</p><p>推荐使用以下方法来初始化Map元素：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> map <span class="token operator">=</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>map<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>map<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>读取：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> number <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>mapOf()和 mutableMapOf()</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> map2 <span class="token operator">=</span> <span class="token function">mapOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span> <span class="token keyword">to</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span> <span class="token keyword">to</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span> <span class="token keyword">to</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span> <span class="token keyword">to</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Grape"</span></span> <span class="token keyword">to</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fruit<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token keyword">in</span> map2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"fruit: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">fruit</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">num</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>二者区别同listOf() &amp; mutableListOf() ，mapOf()是不可变的，mutableMapOf()是可变的</p><p>而mapOf() 的to并不是关键字，而是一个<strong>infix函数</strong></p><h4><span id="124-集合的函数式api语法结构">12.4 集合的函数式API语法结构</span></h4><p>需求：找到list集合中单词长度最长的水果</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list4 <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Grape"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Watermelon"</span></span><span class="token punctuation">)</span><span class="token keyword">var</span> maxLengthFruit <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">""</span></span><span class="token keyword">for</span><span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list4<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>fruit<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> maxLengthFruit<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        maxLengthFruit <span class="token operator">=</span> fruit    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"max length fruit is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">maxLengthFruit</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用函数式API</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list4 <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Grape"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Watermelon"</span></span><span class="token punctuation">)</span><span class="token comment">// 使用函数式API</span><span class="token keyword">var</span> maxLengthFruit <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">maxBy</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"max length fruit is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">maxLengthFruit</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{参数名1： 参数类型， 参数名2：参数类型 -&gt; 函数体}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list4 <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Grape"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Watermelon"</span></span><span class="token punctuation">)</span><span class="token keyword">var</span> lambda <span class="token operator">=</span> <span class="token punctuation">{</span>fruit <span class="token operator">:</span> String <span class="token operator">-&gt;</span> fruit<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span class="token keyword">var</span> maxLengthFruit <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span>lambda<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上是未简化的lambda表达式</p><p>简化1：Kotlin规定，Lambda参数是函数最后一个参数时， 可以把Lambda表达式移到函数括号外面：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> maxLengthFruit <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>fruit <span class="token operator">:</span> String <span class="token operator">-&gt;</span> fruit<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简化2：Lambda参数时函数的唯一一个参数的话，可以省略括号：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> maxLengthFruit <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">{</span>fruit <span class="token operator">:</span> String <span class="token operator">-&gt;</span> fruit<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简化3：Kotlin的类型推导机制，可以不用声明参数类型</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> maxLengthFruit <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">{</span>fruit <span class="token operator">-&gt;</span> fruit<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简化4：当Lambda表达式的参数列表只有一个参数时，不必声明参数名，可以用it关键字代替</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> maxLengthFruit <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">{</span>it<span class="token punctuation">.</span>length<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完毕</p><p>同样Java的函数式API（单抽象方法接口为参数）也可以有以上的简化过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转Kotlin：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> Runnable <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Thread is running"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化1：省略run方法（因为Runnable接口只有一个方法）和参数类型</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">Thread</span><span class="token punctuation">(</span>Runnable <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Thread is running"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>简化2：省略接口名</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">Thread</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Thread is running"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>简化3：Lambda方法是最后一个参数，可以提到括号外面，同时如果该参数数唯一参数，省略括号</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">Thread<span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Thread is running"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230311215003948.png" alt="image-20230311215003948"></p><p>同理，控件的监听事件也可以如此法简化，最终结果：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"sfsfs"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4><span id="125-常用函数">12.5 常用函数</span></h4><h5><span id="1251-map">12.5.1 map()</span></h5><p>对集合中的元素进行任意的映射转换,常用场景：把集合内的元素大小写转换、取首字母、统一长度等</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> newList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">{</span>it<span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span>newList<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230311204409196.png" alt="image-20230311204409196"></p><h5><span id="1252-filter">12.5.2  filter()</span></h5><p>用于过滤数据，可以单独使用，也可以配合刚才的map函数一起使用</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> newList <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token function">uppercase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>fruit <span class="token keyword">in</span> newList<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230311205928134.png" alt="image-20230311205928134"></p><p><strong>先调用filter再调用map，效率高于二者顺序调换</strong></p><h5><span id="1253-any和all函数">12.5.3 any和all函数</span></h5><p>判断是否所有元素满足lambda表达式条件，any是存在，all是全部</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> list4 <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Pear"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Grape"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Watermelon"</span></span><span class="token punctuation">)</span><span class="token keyword">var</span> anyResult <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token keyword">var</span> allResult <span class="token operator">=</span> list4<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"anyResult is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">anyResult</span></span><span class="token string"> allResult is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">allResult</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230311212019657.png" alt="image-20230311212019657"></p><h3><span id="13-空指针检查">13. 空指针检查</span></h3><p><strong>Kotlin默认所有的参数和变量都不可为空</strong> ，但我们可以通过在参数后面加符号控制：</p><p>?  在类型后面加表示<strong>可以为空</strong>，在参数后面加表示<strong>如果为空不做处理，否则正常调用</strong></p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> age <span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"23"</span></span><span class="token keyword">val</span> age1 <span class="token operator">=</span>age<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>!!  为空的话抛出空指针异常</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> ages <span class="token operator">=</span> age<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>?: 为空返回默认值</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">var</span> ages2 <span class="token operator">=</span> age<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>!! 断言该参数不为空</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">val</span> upperCase <span class="token operator">=</span> content<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>upperCase<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以此例子为例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study<span class="token operator">:</span> Study<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>study <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        study<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        study<span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Study <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Study 是一个接口，并且类型后面加了?， 表示这个参数可以为空，我们看看如果不加的话，调用doStudy方法如果传入的是空，编译器就会报错：</p><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230312164538562.png" alt="image-20230312164538562"></p><p>那我们如果加了？，这个报错就会消失，然后加上一个判空处理，我们就能防止study为空，如果为空，我们什么都不做，如果不为空，正常调用方法🤔等等，这个好像是我们刚刚看到的在参数后面加?的作用是一样的，于是我们改一下：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study<span class="token operator">:</span> Study<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    study<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    study<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就和if判空是等效的了，这就是kotlin空指针检查的好用之处</p><p>使用<strong>let函数</strong>简化：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study<span class="token operator">:</span> Study<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    study<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>         it<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        it<span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>it指study本身</p><p>同样可以省略if的另一个常用操作</p><p>简化前：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> a <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    c<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>    b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简化后：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">val</span> a <span class="token operator">=</span> c <span class="token operator">?:</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="14-语法糖">14. 语法糖</span></h3><h4><span id="141-字符串内嵌表达式">14.1 字符串内嵌表达式</span></h4><p>使用${}符号</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token expression">obj<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. nice to meet you!"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当表达式中仅有一个变量的时候，可以将两边的大括号省略</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">. nice to meet you!"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="142-函数的参数默认值">14.2 函数的参数默认值</span></h4><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printParams</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int<span class="token punctuation">,</span> str<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"hello"</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"num is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">num</span></span><span class="token string"> , str is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">str</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二个参数可以不传，因为有默认值</p><p>如果是第一个参数有默认值呢？</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">printParams</span><span class="token punctuation">(</span>num<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> str<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"num is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">num</span></span><span class="token string"> , str is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">str</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230312171442481.png" alt="image-20230312171442481"></p><p>只传第二个参数会报错，怎么解决呢？kotlin有通过键值对传参的机制：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">printParams</span><span class="token punctuation">(</span>str<span class="token operator">=</span><span class="token string-literal singleline"><span class="token string">"world"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="15标准函数">15.标准函数</span></h3><h4><span id="151-with">15.1 with</span></h4><p>格式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token function">with</span><span class="token punctuation">(</span><span class="token keyword">object</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">// ... </span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作用：</p><blockquote><p>调用同一个对象的多个方法/属性时，可以省去对象名重复，直接调用方法名/属性即可</p></blockquote><p>例子：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">testWith</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 简化前    val list = listOf("Apple", "Banana", "Orange")    val builder = StringBuilder()    builder.append("Start eating fruits.\n")    for(fruit in list) {        builder.append(fruit).append("\n")    }    builder.append("Ate all fruits.")    val result = builder.toString()    print(result)    */</span>    <span class="token comment">// with简化</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">)</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating fruits.\n"</span></span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span>        <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 最后一行/return表达式 为返回值</span>    <span class="token punctuation">}</span>    <span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="152-let">15.2 let</span></h4><p>格式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">{</span>  <span class="token comment">// ? 判断object是否为空，不为空则执行let代码块</span>it<span class="token punctuation">.</span><span class="token function">todo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>作用：</p><blockquote><p>定义一个变量在一个特定的作用域范围内，避免写一些判断null的操作</p></blockquote><p>例子：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study<span class="token operator">:</span> Study<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    study<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    study<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用<strong>let函数</strong>简化：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">doStudy</span><span class="token punctuation">(</span>study<span class="token operator">:</span> Study<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    study<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>         it<span class="token punctuation">.</span><span class="token function">readBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        it<span class="token punctuation">.</span><span class="token function">doHomework</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="153-also">15.3 also</span></h4><p>类似let函数，但区别在于返回值：</p><ul><li>let函数：返回值 = 最后一行 / return的表达式</li><li>also函数：返回值 = 传入的对象的本身</li></ul><p>例子：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// let函数</span><span class="token keyword">var</span> result <span class="token operator">=</span> mVar<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>               it<span class="token punctuation">.</span><span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               it<span class="token punctuation">.</span><span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               it<span class="token punctuation">.</span><span class="token function">function3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token number">999</span><span class="token punctuation">}</span><span class="token comment">// 最终结果 = 返回999给变量result</span><span class="token comment">// also函数</span><span class="token keyword">var</span> result <span class="token operator">=</span> mVar<span class="token punctuation">.</span><span class="token function">also</span> <span class="token punctuation">{</span>               it<span class="token punctuation">.</span><span class="token function">function1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               it<span class="token punctuation">.</span><span class="token function">function2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               it<span class="token punctuation">.</span><span class="token function">function3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token number">999</span><span class="token punctuation">}</span><span class="token comment">// 最终结果 = 返回一个mVar对象给变量result</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="154-run">15.4 run</span></h4><p>格式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">{</span><span class="token comment">// ... </span><span class="token punctuation">}</span><span class="token comment">// 返回值 = 函数块的最后一行 / return表达式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>作用：</p><p>和with函数类似，不同的是run函数通常是在一个对象的基础上调用，并且只接收一个Lambda参数</p><p>例子：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// run函数</span><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">{</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating friuts\n"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span>    <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="155-apply">15.5 apply</span></h4><p>格式：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">{</span><span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token comment">// 最终结果 = 返回一个object对象给变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>作用：</p><blockquote><p>与run函数类似，但区别在于返回值：</p><ul><li>run函数返回最后一行的值 / 表达式</li><li>apply函数返回传入的对象的本身</li></ul><p>可用于对象实例初始化时需要对象中的属性进行赋值 &amp; 返回该对象</p></blockquote><p>例子：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">// apply函数</span><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Apple"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Banana"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Orange"</span></span><span class="token punctuation">)</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">{</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Start eating friuts\n"</span></span><span class="token punctuation">)</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"\n"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">append</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"Ate all fruits."</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">print</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="156-标准函数总结">15.6 标准函数总结</span></h4><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/864ccedffba042728542908d0190dccc.png" alt="img"></p><h3><span id="16静态方法">16.静态方法</span></h3><h4><span id="161定义静态方法">16.1定义静态方法</span></h4><p>在Java中：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用时(无需创建实例)：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Kotlin提供了比静态方法更好用的语法特性——单例：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">object</span> Util <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"do action"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用时：</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin">Util<span class="token punctuation">.</span><span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用单例类的写法会将<strong>整个类中的所有方法全部变成类似于静态方法的调用方式</strong>，如果我们只是希望让类中的某一个方法变成静态方法的调用方式该怎么办呢？</p><p>改为普通类class，使用companion object</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Util <span class="token punctuation">{</span>    <span class="token comment">// 是一定要先创建Util类的实例才能调用的</span>    <span class="token keyword">fun</span> <span class="token function">doAction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"do action1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment">// 直接使用Util.doAction2()的方式调用</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span><span class="token punctuation">{</span>        <span class="token keyword">fun</span> <span class="token function">doAction2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"do action2"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上仅仅只是类似静态方法的特性，要定义真正的静态方法，Kotlin提供了两种实现方式：注解和顶层方法</p><h5><span id="1注解">（1）注解</span></h5><p> @JvmStatic</p><pre class="line-numbers language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Util <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">doAction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"do action1"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span><span class="token punctuation">{</span>        <span class="token annotation builtin">@JvmStatic</span>        <span class="token keyword">fun</span> <span class="token function">doAction2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"do action2"</span></span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意： @JvmStatic注解只能加在单例类或companion object中的方法上，如果你尝试加在一个普通方法上，会直接提示语法错误。</p><h5><span id="2顶层方法">（2）顶层方法</span></h5><p>顶层方法指的是那些没有定义在任何类中的方法，如fun main(){} ；Kotlin编译器会将所有的顶层方法全部编译成静态方法。</p><p>做法：</p><p>新建file文件，里面写的函数都会编译成静态方法，可以在全局被直接调用</p><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230322004710671.png" alt="image-20230322004710671"></p><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230322004747536.png" alt="image-20230322004747536"></p><p>注意：如果是在Java代码中调用，你会发现是找不到doSomething()这个方法的，<strong>因为Java中没有顶层方法这个概念</strong>，所有的方法必须定义在类中，如果一定要调用，需要在使用 <code>文件名kt.method()</code>的方式 ( 因为Kotlin编译器会自动创建一个叫作KotlinHighClassFunKt的Java类 )</p><p><img src="https://gxymdfile-1312735655.cos.ap-guangzhou.myqcloud.com/img/image-20230322005108577.png" alt="image-20230322005108577"></p><h3><span id="17延迟初始化">17.延迟初始化</span></h3><h4><span id="171-延迟初始化">17.1 延迟初始化</span></h4>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
